# This patch inject a sidecar container which is a HTTP proxy for the
# controller manager, it performs RBAC authorization against the Kubernetes API using SubjectAccessReviews.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: akamai-operator-controller-manager
  namespace: akamai-operator-system
spec:
  template:
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: AKAMAI_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: akamai-credentials
        - name: AKAMAI_CLIENT_TOKEN
          valueFrom:
            secretKeyRef:
              key: client_token
              name: akamai-credentials
        - name: AKAMAI_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client_secret
              name: akamai-credentials
        - name: AKAMAI_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              key: access_token
              name: akamai-credentials
        image: ghcr.io/mmz-srf/akamai-operator:0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
      securityContext:
        runAsNonRoot: true
      serviceAccountName: akamai-operator-controller-manager
      terminationGracePeriodSeconds: 10